/*

    ***** HACKER RANK PROBLEM AND SKELETON *****
    
    Print the largest (maximum) hourglass sum found in .

    Sample Input

1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0
    Sample Output

19
    
    Explanation

 contains the following hourglasses:

1 1 1   1 1 0   1 0 0   0 0 0
  1       0       0       0
1 1 1   1 1 0   1 0 0   0 0 0

0 1 0   1 0 0   0 0 0   0 0 0
  1       1       0       0
0 0 2   0 2 4   2 4 4   4 4 0

1 1 1   1 1 0   1 0 0   0 0 0
  0       2       4       4
0 0 0   0 0 2   0 2 0   2 0 0

0 0 2   0 2 4   2 4 4   4 4 0
  0       0       2       0
0 0 1   0 1 2   1 2 4   2 4 0

*/
#include <map>
#include <set>
#include <list>
#include <cmath>
#include <ctime>
#include <deque>
#include <queue>
#include <stack>
#include <string>
#include <bitset>
#include <cstdio>
#include <limits>
#include <vector>
#include <climits>
#include <cstring>
#include <cstdlib>
#include <fstream>
#include <numeric>
#include <sstream>
#include <iostream>
#include <algorithm>
#include <unordered_map>

using namespace std;


int main(){
    vector< vector<int> > arr(6,vector<int>(6));
    for(int arr_i = 0;arr_i < 6;arr_i++){
       for(int arr_j = 0;arr_j < 6;arr_j++){
          cin >> arr[arr_i][arr_j];
       }
    }
    
    int max = arr[0][0]+arr[0][1]+arr[0][2]+arr[1][1]+ arr[2][0]+arr[2][1]+arr[2][2];
    int sum;
    
    for(int r = 0; r <= 3; r++){
        for(int c = 0; c <= 3; ++c){
            
            sum = arr[r][c]+arr[r][c+1]+arr[r][c+2]+arr[r+1][c+1]+ arr[r+2][c]+arr[r+2][c+1]+arr[r+2][c+2];
            
            if(sum > max){
                max = sum;
            }
            
        }
        
    }
    
    cout<<max;
    return max;
    
}
